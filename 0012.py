# Problem Statement:
# The sequence of triangle numbers is generated by adding the natural numbers. For example, the 7th triangle number would be:
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms of the sequence are:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# We are tasked to find the first triangle number that has over five hundred divisors.

def prime_factors(n):
    i = 2
    factors = {}
    while i * i <= n:
        while (n % i) == 0:
            if i in factors:
                factors[i] += 1
            else:
                factors[i] = 1
            n //= i
        i += 1
    if n > 1:
        factors[n] = 1
    return factors

def count_divisors_using_prime_factors(n):
    factors = prime_factors(n)
    count = 1
    for exponent in factors.values():
        count *= (exponent + 1)
    return count

def find_triangle_number_with_divisors_using_prime_factors(limit):
    triangle_number = 0
    natural_number = 1

    while True:
        triangle_number += natural_number
        natural_number += 1

        if count_divisors_using_prime_factors(triangle_number) > limit:
            return triangle_number

divisor_limit = 500
result = find_triangle_number_with_divisors_using_prime_factors(divisor_limit)
print(result)
# 76576500